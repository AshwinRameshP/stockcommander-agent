"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoleDisplayName = exports.hasPermission = exports.getUserRole = exports.UserRole = void 0;
var UserRole;
(function (UserRole) {
    UserRole["ADMIN"] = "admin";
    UserRole["MANAGER"] = "manager";
    UserRole["PROCUREMENT"] = "procurement";
    UserRole["USER"] = "user";
})(UserRole || (exports.UserRole = UserRole = {}));
const getUserRole = (user) => {
    const groups = user?.signInUserSession?.accessToken?.payload?.['cognito:groups'] || [];
    if (groups.includes('admin'))
        return UserRole.ADMIN;
    if (groups.includes('manager'))
        return UserRole.MANAGER;
    if (groups.includes('procurement'))
        return UserRole.PROCUREMENT;
    return UserRole.USER;
};
exports.getUserRole = getUserRole;
const hasPermission = (user, requiredRole) => {
    const userRole = (0, exports.getUserRole)(user);
    const roleHierarchy = {
        [UserRole.ADMIN]: 4,
        [UserRole.MANAGER]: 3,
        [UserRole.PROCUREMENT]: 2,
        [UserRole.USER]: 1
    };
    return roleHierarchy[userRole] >= roleHierarchy[requiredRole];
};
exports.hasPermission = hasPermission;
const getRoleDisplayName = (role) => {
    const roleNames = {
        [UserRole.ADMIN]: 'Administrator',
        [UserRole.MANAGER]: 'Warehouse Manager',
        [UserRole.PROCUREMENT]: 'Procurement Specialist',
        [UserRole.USER]: 'User'
    };
    return roleNames[role];
};
exports.getRoleDisplayName = getRoleDisplayName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBY0EsSUFBWSxRQUtYO0FBTEQsV0FBWSxRQUFRO0lBQ2xCLDJCQUFlLENBQUE7SUFDZiwrQkFBbUIsQ0FBQTtJQUNuQix1Q0FBMkIsQ0FBQTtJQUMzQix5QkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQUxXLFFBQVEsd0JBQVIsUUFBUSxRQUtuQjtBQUVNLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBVSxFQUFZLEVBQUU7SUFDbEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV2RixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQUUsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ3BELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFBRSxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7SUFDeEQsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUFFLE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQztJQUNoRSxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBUFcsUUFBQSxXQUFXLGVBT3RCO0FBRUssTUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFVLEVBQUUsWUFBc0IsRUFBVyxFQUFFO0lBQzNFLE1BQU0sUUFBUSxHQUFHLElBQUEsbUJBQVcsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUVuQyxNQUFNLGFBQWEsR0FBRztRQUNwQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ25CLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDckIsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUN6QixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0tBQ25CLENBQUM7SUFFRixPQUFPLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDaEUsQ0FBQyxDQUFDO0FBWFcsUUFBQSxhQUFhLGlCQVd4QjtBQUVLLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFjLEVBQVUsRUFBRTtJQUMzRCxNQUFNLFNBQVMsR0FBRztRQUNoQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxlQUFlO1FBQ2pDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLG1CQUFtQjtRQUN2QyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSx3QkFBd0I7UUFDaEQsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTTtLQUN4QixDQUFDO0lBRUYsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBVFcsUUFBQSxrQkFBa0Isc0JBUzdCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcclxuICBhdHRyaWJ1dGVzOiB7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgc3ViOiBzdHJpbmc7XHJcbiAgfTtcclxuICBzaWduSW5Vc2VyU2Vzc2lvbj86IHtcclxuICAgIGFjY2Vzc1Rva2VuOiB7XHJcbiAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAnY29nbml0bzpncm91cHMnPzogc3RyaW5nW107XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFVzZXJSb2xlIHtcclxuICBBRE1JTiA9ICdhZG1pbicsXHJcbiAgTUFOQUdFUiA9ICdtYW5hZ2VyJyxcclxuICBQUk9DVVJFTUVOVCA9ICdwcm9jdXJlbWVudCcsXHJcbiAgVVNFUiA9ICd1c2VyJ1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VXNlclJvbGUgPSAodXNlcjogVXNlcik6IFVzZXJSb2xlID0+IHtcclxuICBjb25zdCBncm91cHMgPSB1c2VyPy5zaWduSW5Vc2VyU2Vzc2lvbj8uYWNjZXNzVG9rZW4/LnBheWxvYWQ/LlsnY29nbml0bzpncm91cHMnXSB8fCBbXTtcclxuICBcclxuICBpZiAoZ3JvdXBzLmluY2x1ZGVzKCdhZG1pbicpKSByZXR1cm4gVXNlclJvbGUuQURNSU47XHJcbiAgaWYgKGdyb3Vwcy5pbmNsdWRlcygnbWFuYWdlcicpKSByZXR1cm4gVXNlclJvbGUuTUFOQUdFUjtcclxuICBpZiAoZ3JvdXBzLmluY2x1ZGVzKCdwcm9jdXJlbWVudCcpKSByZXR1cm4gVXNlclJvbGUuUFJPQ1VSRU1FTlQ7XHJcbiAgcmV0dXJuIFVzZXJSb2xlLlVTRVI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaGFzUGVybWlzc2lvbiA9ICh1c2VyOiBVc2VyLCByZXF1aXJlZFJvbGU6IFVzZXJSb2xlKTogYm9vbGVhbiA9PiB7XHJcbiAgY29uc3QgdXNlclJvbGUgPSBnZXRVc2VyUm9sZSh1c2VyKTtcclxuICBcclxuICBjb25zdCByb2xlSGllcmFyY2h5ID0ge1xyXG4gICAgW1VzZXJSb2xlLkFETUlOXTogNCxcclxuICAgIFtVc2VyUm9sZS5NQU5BR0VSXTogMyxcclxuICAgIFtVc2VyUm9sZS5QUk9DVVJFTUVOVF06IDIsXHJcbiAgICBbVXNlclJvbGUuVVNFUl06IDFcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiByb2xlSGllcmFyY2h5W3VzZXJSb2xlXSA+PSByb2xlSGllcmFyY2h5W3JlcXVpcmVkUm9sZV07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Um9sZURpc3BsYXlOYW1lID0gKHJvbGU6IFVzZXJSb2xlKTogc3RyaW5nID0+IHtcclxuICBjb25zdCByb2xlTmFtZXMgPSB7XHJcbiAgICBbVXNlclJvbGUuQURNSU5dOiAnQWRtaW5pc3RyYXRvcicsXHJcbiAgICBbVXNlclJvbGUuTUFOQUdFUl06ICdXYXJlaG91c2UgTWFuYWdlcicsXHJcbiAgICBbVXNlclJvbGUuUFJPQ1VSRU1FTlRdOiAnUHJvY3VyZW1lbnQgU3BlY2lhbGlzdCcsXHJcbiAgICBbVXNlclJvbGUuVVNFUl06ICdVc2VyJ1xyXG4gIH07XHJcbiAgXHJcbiAgcmV0dXJuIHJvbGVOYW1lc1tyb2xlXTtcclxufTsiXX0=